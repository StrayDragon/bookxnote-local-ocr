/*
BookxNote Local OCR API

BookxNote 本地 OCR 服务 API 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ImageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageRequest{}

// ImageRequest struct for ImageRequest
type ImageRequest struct {
	// Base64编码的图片内容（支持PNG/JPG格式）
	ImageBase64 string `json:"image_base64"`
	// 服务特定的配置参数。 实现者可以定义自己的键值对。 
	Config map[string]interface{} `json:"config,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ImageRequest ImageRequest

// NewImageRequest instantiates a new ImageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageRequest(imageBase64 string) *ImageRequest {
	this := ImageRequest{}
	this.ImageBase64 = imageBase64
	return &this
}

// NewImageRequestWithDefaults instantiates a new ImageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageRequestWithDefaults() *ImageRequest {
	this := ImageRequest{}
	return &this
}

// GetImageBase64 returns the ImageBase64 field value
func (o *ImageRequest) GetImageBase64() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageBase64
}

// GetImageBase64Ok returns a tuple with the ImageBase64 field value
// and a boolean to check if the value has been set.
func (o *ImageRequest) GetImageBase64Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageBase64, true
}

// SetImageBase64 sets field value
func (o *ImageRequest) SetImageBase64(v string) {
	o.ImageBase64 = v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ImageRequest) GetConfig() map[string]interface{} {
	if o == nil || IsNil(o.Config) {
		var ret map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageRequest) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Config) {
		return map[string]interface{}{}, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ImageRequest) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *ImageRequest) SetConfig(v map[string]interface{}) {
	o.Config = v
}

func (o ImageRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["image_base64"] = o.ImageBase64
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ImageRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"image_base64",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImageRequest := _ImageRequest{}

	err = json.Unmarshal(data, &varImageRequest)

	if err != nil {
		return err
	}

	*o = ImageRequest(varImageRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "image_base64")
		delete(additionalProperties, "config")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableImageRequest struct {
	value *ImageRequest
	isSet bool
}

func (v NullableImageRequest) Get() *ImageRequest {
	return v.value
}

func (v *NullableImageRequest) Set(val *ImageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableImageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableImageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageRequest(val *ImageRequest) *NullableImageRequest {
	return &NullableImageRequest{value: val, isSet: true}
}

func (v NullableImageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


