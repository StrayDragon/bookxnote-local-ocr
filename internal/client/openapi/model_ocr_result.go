/*
BookxNote Local OCR API

BookxNote 本地 OCR 服务 API 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the OCRResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OCRResult{}

// OCRResult struct for OCRResult
type OCRResult struct {
	// 识别出的文本内容
	Text string `json:"text"`
	Metadata *OCRResultMetadata `json:"metadata,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OCRResult OCRResult

// NewOCRResult instantiates a new OCRResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOCRResult(text string) *OCRResult {
	this := OCRResult{}
	this.Text = text
	return &this
}

// NewOCRResultWithDefaults instantiates a new OCRResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOCRResultWithDefaults() *OCRResult {
	this := OCRResult{}
	return &this
}

// GetText returns the Text field value
func (o *OCRResult) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *OCRResult) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *OCRResult) SetText(v string) {
	o.Text = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *OCRResult) GetMetadata() OCRResultMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret OCRResultMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OCRResult) GetMetadataOk() (*OCRResultMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *OCRResult) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given OCRResultMetadata and assigns it to the Metadata field.
func (o *OCRResult) SetMetadata(v OCRResultMetadata) {
	o.Metadata = &v
}

func (o OCRResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OCRResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["text"] = o.Text
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OCRResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOCRResult := _OCRResult{}

	err = json.Unmarshal(data, &varOCRResult)

	if err != nil {
		return err
	}

	*o = OCRResult(varOCRResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "text")
		delete(additionalProperties, "metadata")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOCRResult struct {
	value *OCRResult
	isSet bool
}

func (v NullableOCRResult) Get() *OCRResult {
	return v.value
}

func (v *NullableOCRResult) Set(val *OCRResult) {
	v.value = val
	v.isSet = true
}

func (v NullableOCRResult) IsSet() bool {
	return v.isSet
}

func (v *NullableOCRResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOCRResult(val *OCRResult) *NullableOCRResult {
	return &NullableOCRResult{value: val, isSet: true}
}

func (v NullableOCRResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOCRResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


