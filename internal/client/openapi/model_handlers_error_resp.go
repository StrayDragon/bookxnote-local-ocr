/*
BookxNote Local OCR API

This is a local OCR service for BookxNote that mimics Baidu OCR API

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HandlersErrorResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HandlersErrorResp{}

// HandlersErrorResp struct for HandlersErrorResp
type HandlersErrorResp struct {
	// 错误码
	ErrorCode *int32 `json:"error_code,omitempty"`
	// 错误信息
	ErrorMsg *string `json:"error_msg,omitempty"`
	// 错误提示（可选）这里作为扩展字段(X*)方便看
	ErrorXtip *string `json:"error_xtip,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HandlersErrorResp HandlersErrorResp

// NewHandlersErrorResp instantiates a new HandlersErrorResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHandlersErrorResp() *HandlersErrorResp {
	this := HandlersErrorResp{}
	return &this
}

// NewHandlersErrorRespWithDefaults instantiates a new HandlersErrorResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHandlersErrorRespWithDefaults() *HandlersErrorResp {
	this := HandlersErrorResp{}
	return &this
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *HandlersErrorResp) GetErrorCode() int32 {
	if o == nil || IsNil(o.ErrorCode) {
		var ret int32
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersErrorResp) GetErrorCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *HandlersErrorResp) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given int32 and assigns it to the ErrorCode field.
func (o *HandlersErrorResp) SetErrorCode(v int32) {
	o.ErrorCode = &v
}

// GetErrorMsg returns the ErrorMsg field value if set, zero value otherwise.
func (o *HandlersErrorResp) GetErrorMsg() string {
	if o == nil || IsNil(o.ErrorMsg) {
		var ret string
		return ret
	}
	return *o.ErrorMsg
}

// GetErrorMsgOk returns a tuple with the ErrorMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersErrorResp) GetErrorMsgOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMsg) {
		return nil, false
	}
	return o.ErrorMsg, true
}

// HasErrorMsg returns a boolean if a field has been set.
func (o *HandlersErrorResp) HasErrorMsg() bool {
	if o != nil && !IsNil(o.ErrorMsg) {
		return true
	}

	return false
}

// SetErrorMsg gets a reference to the given string and assigns it to the ErrorMsg field.
func (o *HandlersErrorResp) SetErrorMsg(v string) {
	o.ErrorMsg = &v
}

// GetErrorXtip returns the ErrorXtip field value if set, zero value otherwise.
func (o *HandlersErrorResp) GetErrorXtip() string {
	if o == nil || IsNil(o.ErrorXtip) {
		var ret string
		return ret
	}
	return *o.ErrorXtip
}

// GetErrorXtipOk returns a tuple with the ErrorXtip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersErrorResp) GetErrorXtipOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorXtip) {
		return nil, false
	}
	return o.ErrorXtip, true
}

// HasErrorXtip returns a boolean if a field has been set.
func (o *HandlersErrorResp) HasErrorXtip() bool {
	if o != nil && !IsNil(o.ErrorXtip) {
		return true
	}

	return false
}

// SetErrorXtip gets a reference to the given string and assigns it to the ErrorXtip field.
func (o *HandlersErrorResp) SetErrorXtip(v string) {
	o.ErrorXtip = &v
}

func (o HandlersErrorResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HandlersErrorResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorCode) {
		toSerialize["error_code"] = o.ErrorCode
	}
	if !IsNil(o.ErrorMsg) {
		toSerialize["error_msg"] = o.ErrorMsg
	}
	if !IsNil(o.ErrorXtip) {
		toSerialize["error_xtip"] = o.ErrorXtip
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HandlersErrorResp) UnmarshalJSON(data []byte) (err error) {
	varHandlersErrorResp := _HandlersErrorResp{}

	err = json.Unmarshal(data, &varHandlersErrorResp)

	if err != nil {
		return err
	}

	*o = HandlersErrorResp(varHandlersErrorResp)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "error_code")
		delete(additionalProperties, "error_msg")
		delete(additionalProperties, "error_xtip")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHandlersErrorResp struct {
	value *HandlersErrorResp
	isSet bool
}

func (v NullableHandlersErrorResp) Get() *HandlersErrorResp {
	return v.value
}

func (v *NullableHandlersErrorResp) Set(val *HandlersErrorResp) {
	v.value = val
	v.isSet = true
}

func (v NullableHandlersErrorResp) IsSet() bool {
	return v.isSet
}

func (v *NullableHandlersErrorResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandlersErrorResp(val *HandlersErrorResp) *NullableHandlersErrorResp {
	return &NullableHandlersErrorResp{value: val, isSet: true}
}

func (v NullableHandlersErrorResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandlersErrorResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


