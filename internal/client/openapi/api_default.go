/*
BookxNote Local OCR API

BookxNote 本地 OCR 服务 API 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type DefaultAPI interface {

	/*
	PostOcrByBxnLocalOcr 执行图片OCR识别

	上传图片并返回OCR识别结果

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DefaultAPIPostOcrByBxnLocalOcrRequest
	*/
	PostOcrByBxnLocalOcr(ctx context.Context) DefaultAPIPostOcrByBxnLocalOcrRequest

	// PostOcrByBxnLocalOcrExecute executes the request
	//  @return PostOcrByBxnLocalOcr200Response
	PostOcrByBxnLocalOcrExecute(r DefaultAPIPostOcrByBxnLocalOcrRequest) (*PostOcrByBxnLocalOcr200Response, *http.Response, error)
}

// DefaultAPIService DefaultAPI service
type DefaultAPIService service

type DefaultAPIPostOcrByBxnLocalOcrRequest struct {
	ctx context.Context
	ApiService DefaultAPI
	base64Image *string
}

// Base64编码的图片数据
func (r DefaultAPIPostOcrByBxnLocalOcrRequest) Base64Image(base64Image string) DefaultAPIPostOcrByBxnLocalOcrRequest {
	r.base64Image = &base64Image
	return r
}

func (r DefaultAPIPostOcrByBxnLocalOcrRequest) Execute() (*PostOcrByBxnLocalOcr200Response, *http.Response, error) {
	return r.ApiService.PostOcrByBxnLocalOcrExecute(r)
}

/*
PostOcrByBxnLocalOcr 执行图片OCR识别

上传图片并返回OCR识别结果

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DefaultAPIPostOcrByBxnLocalOcrRequest
*/
func (a *DefaultAPIService) PostOcrByBxnLocalOcr(ctx context.Context) DefaultAPIPostOcrByBxnLocalOcrRequest {
	return DefaultAPIPostOcrByBxnLocalOcrRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PostOcrByBxnLocalOcr200Response
func (a *DefaultAPIService) PostOcrByBxnLocalOcrExecute(r DefaultAPIPostOcrByBxnLocalOcrRequest) (*PostOcrByBxnLocalOcr200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostOcrByBxnLocalOcr200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.PostOcrByBxnLocalOcr")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ocr_by_bxn_local_ocr"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.base64Image != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "base64_image", r.base64Image, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v PostOcrByBxnLocalOcr400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v PostOcrByBxnLocalOcr400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
