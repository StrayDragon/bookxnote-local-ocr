/*
BookxNote Local OCR API

BookxNote 本地 OCR 服务 API 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OCRResultMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OCRResultMetadata{}

// OCRResultMetadata struct for OCRResultMetadata
type OCRResultMetadata struct {
	// 处理时间（秒）
	ProcessingTime *float32 `json:"processing_time,omitempty"`
	// 整体置信度得分（0-1）
	Confidence *float32 `json:"confidence,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OCRResultMetadata OCRResultMetadata

// NewOCRResultMetadata instantiates a new OCRResultMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOCRResultMetadata() *OCRResultMetadata {
	this := OCRResultMetadata{}
	return &this
}

// NewOCRResultMetadataWithDefaults instantiates a new OCRResultMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOCRResultMetadataWithDefaults() *OCRResultMetadata {
	this := OCRResultMetadata{}
	return &this
}

// GetProcessingTime returns the ProcessingTime field value if set, zero value otherwise.
func (o *OCRResultMetadata) GetProcessingTime() float32 {
	if o == nil || IsNil(o.ProcessingTime) {
		var ret float32
		return ret
	}
	return *o.ProcessingTime
}

// GetProcessingTimeOk returns a tuple with the ProcessingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OCRResultMetadata) GetProcessingTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.ProcessingTime) {
		return nil, false
	}
	return o.ProcessingTime, true
}

// HasProcessingTime returns a boolean if a field has been set.
func (o *OCRResultMetadata) HasProcessingTime() bool {
	if o != nil && !IsNil(o.ProcessingTime) {
		return true
	}

	return false
}

// SetProcessingTime gets a reference to the given float32 and assigns it to the ProcessingTime field.
func (o *OCRResultMetadata) SetProcessingTime(v float32) {
	o.ProcessingTime = &v
}

// GetConfidence returns the Confidence field value if set, zero value otherwise.
func (o *OCRResultMetadata) GetConfidence() float32 {
	if o == nil || IsNil(o.Confidence) {
		var ret float32
		return ret
	}
	return *o.Confidence
}

// GetConfidenceOk returns a tuple with the Confidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OCRResultMetadata) GetConfidenceOk() (*float32, bool) {
	if o == nil || IsNil(o.Confidence) {
		return nil, false
	}
	return o.Confidence, true
}

// HasConfidence returns a boolean if a field has been set.
func (o *OCRResultMetadata) HasConfidence() bool {
	if o != nil && !IsNil(o.Confidence) {
		return true
	}

	return false
}

// SetConfidence gets a reference to the given float32 and assigns it to the Confidence field.
func (o *OCRResultMetadata) SetConfidence(v float32) {
	o.Confidence = &v
}

func (o OCRResultMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OCRResultMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProcessingTime) {
		toSerialize["processing_time"] = o.ProcessingTime
	}
	if !IsNil(o.Confidence) {
		toSerialize["confidence"] = o.Confidence
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OCRResultMetadata) UnmarshalJSON(data []byte) (err error) {
	varOCRResultMetadata := _OCRResultMetadata{}

	err = json.Unmarshal(data, &varOCRResultMetadata)

	if err != nil {
		return err
	}

	*o = OCRResultMetadata(varOCRResultMetadata)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "processing_time")
		delete(additionalProperties, "confidence")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOCRResultMetadata struct {
	value *OCRResultMetadata
	isSet bool
}

func (v NullableOCRResultMetadata) Get() *OCRResultMetadata {
	return v.value
}

func (v *NullableOCRResultMetadata) Set(val *OCRResultMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableOCRResultMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableOCRResultMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOCRResultMetadata(val *OCRResultMetadata) *NullableOCRResultMetadata {
	return &NullableOCRResultMetadata{value: val, isSet: true}
}

func (v NullableOCRResultMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOCRResultMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


