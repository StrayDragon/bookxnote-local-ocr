/*
BookxNote Local OCR API

This is a local OCR service for BookxNote that mimics Baidu OCR API

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inner_server

import (
	"encoding/json"
	"fmt"
)

// checks if the HandlersAppConfigSetReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HandlersAppConfigSetReq{}

// HandlersAppConfigSetReq struct for HandlersAppConfigSetReq
type HandlersAppConfigSetReq struct {
	Key string `json:"key"`
	Value interface{} `json:"value"`
	AdditionalProperties map[string]interface{}
}

type _HandlersAppConfigSetReq HandlersAppConfigSetReq

// NewHandlersAppConfigSetReq instantiates a new HandlersAppConfigSetReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHandlersAppConfigSetReq(key string, value interface{}) *HandlersAppConfigSetReq {
	this := HandlersAppConfigSetReq{}
	this.Key = key
	this.Value = value
	return &this
}

// NewHandlersAppConfigSetReqWithDefaults instantiates a new HandlersAppConfigSetReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHandlersAppConfigSetReqWithDefaults() *HandlersAppConfigSetReq {
	this := HandlersAppConfigSetReq{}
	return &this
}

// GetKey returns the Key field value
func (o *HandlersAppConfigSetReq) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *HandlersAppConfigSetReq) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *HandlersAppConfigSetReq) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *HandlersAppConfigSetReq) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HandlersAppConfigSetReq) GetValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *HandlersAppConfigSetReq) SetValue(v interface{}) {
	o.Value = v
}

func (o HandlersAppConfigSetReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HandlersAppConfigSetReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HandlersAppConfigSetReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHandlersAppConfigSetReq := _HandlersAppConfigSetReq{}

	err = json.Unmarshal(data, &varHandlersAppConfigSetReq)

	if err != nil {
		return err
	}

	*o = HandlersAppConfigSetReq(varHandlersAppConfigSetReq)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHandlersAppConfigSetReq struct {
	value *HandlersAppConfigSetReq
	isSet bool
}

func (v NullableHandlersAppConfigSetReq) Get() *HandlersAppConfigSetReq {
	return v.value
}

func (v *NullableHandlersAppConfigSetReq) Set(val *HandlersAppConfigSetReq) {
	v.value = val
	v.isSet = true
}

func (v NullableHandlersAppConfigSetReq) IsSet() bool {
	return v.isSet
}

func (v *NullableHandlersAppConfigSetReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandlersAppConfigSetReq(val *HandlersAppConfigSetReq) *NullableHandlersAppConfigSetReq {
	return &NullableHandlersAppConfigSetReq{value: val, isSet: true}
}

func (v NullableHandlersAppConfigSetReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandlersAppConfigSetReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


