/*
BookxNote Local OCR API

This is a local OCR service for BookxNote that mimics Baidu OCR API

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inner_server

import (
	"encoding/json"
)

// checks if the HandlersAPITokenResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HandlersAPITokenResp{}

// HandlersAPITokenResp struct for HandlersAPITokenResp
type HandlersAPITokenResp struct {
	AccessToken *string `json:"access_token,omitempty"`
	ExpiresIn *int32 `json:"expires_in,omitempty"`
	RefreshToken *string `json:"refresh_token,omitempty"`
	Scope *string `json:"scope,omitempty"`
	SessionKey *string `json:"session_key,omitempty"`
	SessionSecret *string `json:"session_secret,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HandlersAPITokenResp HandlersAPITokenResp

// NewHandlersAPITokenResp instantiates a new HandlersAPITokenResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHandlersAPITokenResp() *HandlersAPITokenResp {
	this := HandlersAPITokenResp{}
	return &this
}

// NewHandlersAPITokenRespWithDefaults instantiates a new HandlersAPITokenResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHandlersAPITokenRespWithDefaults() *HandlersAPITokenResp {
	this := HandlersAPITokenResp{}
	return &this
}

// GetAccessToken returns the AccessToken field value if set, zero value otherwise.
func (o *HandlersAPITokenResp) GetAccessToken() string {
	if o == nil || IsNil(o.AccessToken) {
		var ret string
		return ret
	}
	return *o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersAPITokenResp) GetAccessTokenOk() (*string, bool) {
	if o == nil || IsNil(o.AccessToken) {
		return nil, false
	}
	return o.AccessToken, true
}

// HasAccessToken returns a boolean if a field has been set.
func (o *HandlersAPITokenResp) HasAccessToken() bool {
	if o != nil && !IsNil(o.AccessToken) {
		return true
	}

	return false
}

// SetAccessToken gets a reference to the given string and assigns it to the AccessToken field.
func (o *HandlersAPITokenResp) SetAccessToken(v string) {
	o.AccessToken = &v
}

// GetExpiresIn returns the ExpiresIn field value if set, zero value otherwise.
func (o *HandlersAPITokenResp) GetExpiresIn() int32 {
	if o == nil || IsNil(o.ExpiresIn) {
		var ret int32
		return ret
	}
	return *o.ExpiresIn
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersAPITokenResp) GetExpiresInOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpiresIn) {
		return nil, false
	}
	return o.ExpiresIn, true
}

// HasExpiresIn returns a boolean if a field has been set.
func (o *HandlersAPITokenResp) HasExpiresIn() bool {
	if o != nil && !IsNil(o.ExpiresIn) {
		return true
	}

	return false
}

// SetExpiresIn gets a reference to the given int32 and assigns it to the ExpiresIn field.
func (o *HandlersAPITokenResp) SetExpiresIn(v int32) {
	o.ExpiresIn = &v
}

// GetRefreshToken returns the RefreshToken field value if set, zero value otherwise.
func (o *HandlersAPITokenResp) GetRefreshToken() string {
	if o == nil || IsNil(o.RefreshToken) {
		var ret string
		return ret
	}
	return *o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersAPITokenResp) GetRefreshTokenOk() (*string, bool) {
	if o == nil || IsNil(o.RefreshToken) {
		return nil, false
	}
	return o.RefreshToken, true
}

// HasRefreshToken returns a boolean if a field has been set.
func (o *HandlersAPITokenResp) HasRefreshToken() bool {
	if o != nil && !IsNil(o.RefreshToken) {
		return true
	}

	return false
}

// SetRefreshToken gets a reference to the given string and assigns it to the RefreshToken field.
func (o *HandlersAPITokenResp) SetRefreshToken(v string) {
	o.RefreshToken = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *HandlersAPITokenResp) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersAPITokenResp) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *HandlersAPITokenResp) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *HandlersAPITokenResp) SetScope(v string) {
	o.Scope = &v
}

// GetSessionKey returns the SessionKey field value if set, zero value otherwise.
func (o *HandlersAPITokenResp) GetSessionKey() string {
	if o == nil || IsNil(o.SessionKey) {
		var ret string
		return ret
	}
	return *o.SessionKey
}

// GetSessionKeyOk returns a tuple with the SessionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersAPITokenResp) GetSessionKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SessionKey) {
		return nil, false
	}
	return o.SessionKey, true
}

// HasSessionKey returns a boolean if a field has been set.
func (o *HandlersAPITokenResp) HasSessionKey() bool {
	if o != nil && !IsNil(o.SessionKey) {
		return true
	}

	return false
}

// SetSessionKey gets a reference to the given string and assigns it to the SessionKey field.
func (o *HandlersAPITokenResp) SetSessionKey(v string) {
	o.SessionKey = &v
}

// GetSessionSecret returns the SessionSecret field value if set, zero value otherwise.
func (o *HandlersAPITokenResp) GetSessionSecret() string {
	if o == nil || IsNil(o.SessionSecret) {
		var ret string
		return ret
	}
	return *o.SessionSecret
}

// GetSessionSecretOk returns a tuple with the SessionSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlersAPITokenResp) GetSessionSecretOk() (*string, bool) {
	if o == nil || IsNil(o.SessionSecret) {
		return nil, false
	}
	return o.SessionSecret, true
}

// HasSessionSecret returns a boolean if a field has been set.
func (o *HandlersAPITokenResp) HasSessionSecret() bool {
	if o != nil && !IsNil(o.SessionSecret) {
		return true
	}

	return false
}

// SetSessionSecret gets a reference to the given string and assigns it to the SessionSecret field.
func (o *HandlersAPITokenResp) SetSessionSecret(v string) {
	o.SessionSecret = &v
}

func (o HandlersAPITokenResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HandlersAPITokenResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessToken) {
		toSerialize["access_token"] = o.AccessToken
	}
	if !IsNil(o.ExpiresIn) {
		toSerialize["expires_in"] = o.ExpiresIn
	}
	if !IsNil(o.RefreshToken) {
		toSerialize["refresh_token"] = o.RefreshToken
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.SessionKey) {
		toSerialize["session_key"] = o.SessionKey
	}
	if !IsNil(o.SessionSecret) {
		toSerialize["session_secret"] = o.SessionSecret
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HandlersAPITokenResp) UnmarshalJSON(data []byte) (err error) {
	varHandlersAPITokenResp := _HandlersAPITokenResp{}

	err = json.Unmarshal(data, &varHandlersAPITokenResp)

	if err != nil {
		return err
	}

	*o = HandlersAPITokenResp(varHandlersAPITokenResp)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "access_token")
		delete(additionalProperties, "expires_in")
		delete(additionalProperties, "refresh_token")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "session_key")
		delete(additionalProperties, "session_secret")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHandlersAPITokenResp struct {
	value *HandlersAPITokenResp
	isSet bool
}

func (v NullableHandlersAPITokenResp) Get() *HandlersAPITokenResp {
	return v.value
}

func (v *NullableHandlersAPITokenResp) Set(val *HandlersAPITokenResp) {
	v.value = val
	v.isSet = true
}

func (v NullableHandlersAPITokenResp) IsSet() bool {
	return v.isSet
}

func (v *NullableHandlersAPITokenResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandlersAPITokenResp(val *HandlersAPITokenResp) *NullableHandlersAPITokenResp {
	return &NullableHandlersAPITokenResp{value: val, isSet: true}
}

func (v NullableHandlersAPITokenResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandlersAPITokenResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


